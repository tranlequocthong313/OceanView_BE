"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 3.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import base64
import os
from pathlib import Path

import cloudinary
import pymysql
from dotenv import load_dotenv
from firebase_admin import credentials, initialize_app

pymysql.install_as_MySQLdb()


BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv()


ENVIRONMENT = os.environ.get("ENVIRONMENT", default="development")


def is_development_env():
    return ENVIRONMENT == "development"


SECRET_KEY = os.environ.get("SECRET_KEY")


DEBUG = is_development_env()

ALLOWED_HOSTS = ["*"]
HOST = os.environ.get("HOST", "http://0.0.0.0:8000")
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
CSRF_TRUSTED_ORIGINS = [HOST, "http://0.0.0.0:8000", "http://localhost:8000"]


INSTALLED_APPS = [
    "user.apps.UserConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    "oauth2_provider",
    "corsheaders",
    "django_ckeditor_5",
    "vnpay",
    "django_crontab",
    "invoice.apps.InvoiceConfig",
    "service.apps.ServiceConfig",
    "apartment.apps.ApartmentConfig",
    "feedback.apps.FeedbackConfig",
    "locker.apps.LockerConfig",
    "notification.apps.NotificationConfig",
    "guide.apps.GuideConfig",
    "news.apps.NewsConfig",
]
CRONJOBS = [
    ("0 0 1 * *", "invoice.tasks.create_invoices"),  # NOTE: every month
    (
        "0 0 * * *",
        "invoice.tasks.create_invoices",
        ["DAILY"],
    ),  # NOTE: every day
    # (
    #     "* * * * *",
    #     "invoice.tasks.create_invoices",
    #     ["DAILY"],
    # ),  # NOTE: FOR DEV AND DEMO PURPOSE
    # (
    #     "* * * * *",
    #     "invoice.tasks.create_invoices",
    # ),  # NOTE: FOR DEV AND DEMO PURPOSE
]

customColorPalette = [
    {"color": "hsl(4, 90%, 58%)", "label": "Red"},
    {"color": "hsl(340, 82%, 52%)", "label": "Pink"},
    {"color": "hsl(291, 64%, 42%)", "label": "Purple"},
    {"color": "hsl(262, 52%, 47%)", "label": "Deep Purple"},
    {"color": "hsl(231, 48%, 48%)", "label": "Indigo"},
    {"color": "hsl(207, 90%, 54%)", "label": "Blue"},
]

CKEDITOR_5_CONFIGS = {
    "default": {
        "toolbar": [
            "heading",
            "|",
            "bold",
            "italic",
            "link",
            "bulletedList",
            "numberedList",
            "blockQuote",
            "imageUpload",
            "mediaEmbed",
            "htmlEmbed",
            "insertTable",
            "codeBlock",
            "sourceEditing",
            "findAndReplace",
            "spellChecker",
            "pasteFromOffice",
            "pageBreak",
            "horizontalLine",
            "specialCharacters",
            "exportPdf",
            "exportWord",
            "undo",
            "redo",
        ],
    },
    "extends": {
        "blockToolbar": [
            "paragraph",
            "heading1",
            "heading2",
            "heading3",
            "|",
            "bulletedList",
            "numberedList",
            "|",
            "blockQuote",
        ],
        "toolbar": [
            "heading",
            "|",
            "outdent",
            "indent",
            "|",
            "bold",
            "italic",
            "link",
            "underline",
            "strikethrough",
            "code",
            "subscript",
            "superscript",
            "highlight",
            "|",
            "codeBlock",
            "sourceEditing",
            "insertImage",
            "bulletedList",
            "numberedList",
            "todoList",
            "|",
            "blockQuote",
            "imageUpload",
            "|",
            "fontSize",
            "fontFamily",
            "fontColor",
            "fontBackgroundColor",
            "mediaEmbed",
            "htmlEmbed",
            "removeFormat",
            "insertTable",
            "|",
            "findAndReplace",
            "spellChecker",
            "pasteFromOffice",
            "pageBreak",
            "horizontalLine",
            "specialCharacters",
            "exportPdf",
            "exportWord",
            "undo",
            "redo",
        ],
        "image": {
            "toolbar": [
                "imageTextAlternative",
                "|",
                "imageStyle:alignLeft",
                "imageStyle:alignRight",
                "imageStyle:alignCenter",
                "imageStyle:side",
                "|",
            ],
            "styles": [
                "full",
                "side",
                "alignLeft",
                "alignRight",
                "alignCenter",
            ],
        },
        "table": {
            "contentToolbar": [
                "tableColumn",
                "tableRow",
                "mergeTableCells",
                "tableProperties",
                "tableCellProperties",
            ],
            "tableProperties": {
                "borderColors": customColorPalette,
                "backgroundColors": customColorPalette,
            },
            "tableCellProperties": {
                "borderColors": customColorPalette,
                "backgroundColors": customColorPalette,
            },
        },
        "heading": {
            "options": [
                {
                    "model": "paragraph",
                    "title": "Paragraph",
                    "class": "ck-heading_paragraph",
                },
                {
                    "model": "heading1",
                    "view": "h1",
                    "title": "Heading 1",
                    "class": "ck-heading_heading1",
                },
                {
                    "model": "heading2",
                    "view": "h2",
                    "title": "Heading 2",
                    "class": "ck-heading_heading2",
                },
                {
                    "model": "heading3",
                    "view": "h3",
                    "title": "Heading 3",
                    "class": "ck-heading_heading3",
                },
            ]
        },
    },
    "list": {
        "properties": {
            "styles": "true",
            "startIndex": "true",
            "reversed": "true",
        }
    },
    "mediaEmbed": {
        "previewsInData": "true",
    },
    "htmlEmbed": {
        "showPreviews": "true",
    },
    "exportPdf": {
        "fileName": "document.pdf",
    },
    "exportWord": {
        "fileName": "document.docx",
    },
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "user.middlewares.SendOTPRateLimitMiddleware",
    "invoice.middlewares.VnPayMiddleware",
]

ROOT_URLCONF = "app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "app.wsgi.application"


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.environ.get("MYSQL_DATABASE"),
        "USER": os.environ.get("MYSQL_USER"),
        "PASSWORD": os.environ.get("MYSQL_PASSWORD"),
        "HOST": os.environ.get("MYSQL_HOST"),
        "PORT": os.environ.get("MYSQL_PORT"),
    }
}

print(f"DB HOST: {DATABASES['default']['HOST']}")


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


STATIC_URL = "/static/"
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

COMPANY_NAME = "OceanView"
LOGO = "https://res.cloudinary.com/diojasks1/image/upload/v1714901151/ff0shecjx5xmzojyg6oq.jpg"

AUTH_USER_MODEL = "user.User"

cloudinary.config(
    cloud_name=os.environ.get("CLOUDINARY_NAME"),
    api_key=os.environ.get("CLOUDINARY_API_KEY"),
    api_secret=os.environ.get("CLOUDINARY_API_SECRET"),
)

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 10,
}

CLIENT_ID = os.environ.get("CLIENT_ID")
CLIENT_SECRET = os.environ.get("CLIENT_SECRET")
CLIENT_TYPE = os.environ.get("CLIENT_TYPE")
GRANT_TYPE = os.environ.get("GRANT_TYPE")

CORS_ALLOW_ALL_ORIGINS = is_development_env()

STATIC_ROOT = os.path.join(BASE_DIR, "static")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {"format": "%(asctime)s %(levelname)s %(name)s %(message)s"},
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "standard",
            "filters": [],
        },
    },
    "loggers": {
        logger_name: {"level": "WARNING", "propagate": True}
        for logger_name in (
            "django",
            "django.request",
            "django.db.backends",
            "django.template",
        )
    },
    "root": {"level": "DEBUG", "handlers": ["console"]},
}

LOGGING["formatters"]["colored"] = {
    "()": "colorlog.ColoredFormatter",
    "format": "%(log_color)s%(asctime)s %(levelname)s %(name)s %(bold_white)s%(message)s",
}
LOGGING["handlers"]["console"]["level"] = "DEBUG"
LOGGING["handlers"]["console"]["formatter"] = "colored"

TWILIO_SID = os.environ.get("TWILIO_SID")
TWILIO_TOKEN = os.environ.get("TWILIO_TOKEN")
TWILIO_NUMBER = os.environ.get("TWILIO_NUMBER")
TWILIO_SERVICE_SID = os.environ.get("TWILIO_SERVICE_SID")
TWILIO_SENDGRID_API_KEY = os.environ.get("TWILIO_SENDGRID_API_KEY")

EMAIL_BACKEND = "backend.email.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = f"{COMPANY_NAME} <{os.environ.get('EMAIL_HOST_USER')}>"

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ.get("REDIS_URL"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100},
        },
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

HASHING_SALT = os.environ.get("HASHING_SALT")

RESET_PASSWORD_TOKEN_EXPIRE_TIME = int(
    os.environ.get("RESET_PASSWORD_TOKEN_EXPIRE_TIME")
)
RATE_LIMIT_EXPIRE_TIME = 60

SPECTACULAR_SETTINGS = {
    "TITLE": "OceanView API",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_DIST": "SIDECAR",
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
}

ADMIN_INFO = {
    "personal_information": {
        "citizen_id": os.environ.get("ADMIN_CITIZEN_ID"),
        "full_name": os.environ.get("ADMIN_FULL_NAME"),
        "phone_number": os.environ.get("ADMIN_PHONE_NUMBER"),
        "email": os.environ.get("ADMIN_EMAIL"),
    },
    "password": os.environ.get("ADMIN_PASSWORD"),
}


firebase_credentials = {
    "type": os.environ.get("FIREBASE_TYPE"),
    "project_id": os.environ.get("FIREBASE_PROJECT_ID"),
    "private_key_id": os.environ.get("FIREBASE_PRIVATE_KEY_ID"),
    "private_key": base64.b64decode(
        os.environ.get("FIREBASE_PRIVATE_KEY").encode("ascii")
    ).decode("ascii"),
    "client_email": os.environ.get("FIREBASE_CLIENT_EMAIL"),
    "client_id": os.environ.get("FIREBASE_CLIENT_ID"),
    "auth_uri": os.environ.get("FIREBASE_AUTH_URI"),
    "token_uri": os.environ.get("FIREBASE_TOKEN_URI"),
    "auth_provider_x509_cert_url": os.environ.get(
        "FIREBASE_AUTH_PROVIDER_X509_CERT_URL"
    ),
    "client_x509_cert_url": os.environ.get("FIREBASE_CLIENT_X509_CERT_URL"),
    "universe_domain": os.environ.get("FIREBASE_UNIVERSE_DOMAIN"),
}
cred = credentials.Certificate(firebase_credentials)
FIREBASE_ADMIN = initialize_app(cred)

VNPAY_TMN_CODE = os.environ.get("VNPAY_TMN_CODE")
VNPAY_HASH_SECRET_KEY = os.environ.get("VNPAY_HASH_SECRET_KEY")
VNPAY_PAYMENT_URL = os.environ.get("VNPAY_PAYMENT_URL")
VNPAY_RETURN_URL = HOST + os.environ.get("VNPAY_RETURN_URL")

MOMO_LANG = "vi"
MOMO_REQUEST_TYPE = "captureWallet"
MOMO_STORE_ID = "OceanView"
MOMO_PARTNER_CODE = "MOMO"
MOMO_PARTNER_NAME = "Momo Payment"
MOMO_ACCESS_KEY = os.environ.get("MOMO_ACCESS_KEY")
MOMO_SECRET_KEY = os.environ.get("MOMO_SECRET_KEY")
MOMO_ENDPOINT = os.environ.get("MOMO_ENDPOINT")
MOMO_REDIRECT_URL = HOST + os.environ.get("MOMO_REDIRECT_URL")
MOMO_IPN_URL = HOST + os.environ.get("MOMO_IPN_URL")
